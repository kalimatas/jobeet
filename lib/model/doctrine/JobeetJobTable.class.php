<?php

/**
 * JobeetJobTable
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class JobeetJobTable extends Doctrine_Table
{
    static public $types = array(
        'full-time' => 'Full time',
        'part-time' => 'Part time',
        'freelance' => 'Freelance'
    );

    public function getTypes()
    {
        return self::$types;
    }

    /**
     * Returns an instance of this class.
     *
     * @return object JobeetJobTable
     */
    public static function getInstance()
    {
        return Doctrine_Core::getTable('JobeetJob');
    }

    /**
     * Получение списка активных вакансий
     */
    public function getActiveJobs(Doctrine_Query $query = null)
    {
        if ( is_null($query) ) {
            $query = Doctrine_Query::create()
                ->from('JobeetJob j');
        }

        $query->addWhere('j.expires_at > ?', date('Y-m-d H:i:s', time() - 86400 * sfConfig::get('app_active_days')))
            ->addOrderBy('j.expires_at DESC');

        return $query->execute();
    }

    public function retrieveActiveJob(Doctrine_Query $query)
    {
        $query->addWhere('a.expires_at > ?', date('Y-m-d H:i:s', time() -86400 * sfConfig::get('app_active_days')));

        return $query->fetchOne();
    }

    public function countActiveJobs(Doctrine_Query $query = null)
    {
        return $this->addActiveJobsQuery($query)->count();
    }

    public function addActiveJobsQuery(Doctrine_Query $query = null)
    {
        if ( is_null($query) ) {
            $query = Doctrine_Query::create()
                ->from('JobeetJob j');
        }

        $alias = $query->getRootAlias();

        $query->addWhere($alias . '.expires_at > ?', date('Y-m-d H:i:s', time() - 86400 * sfConfig::get('app_active_days')))
            ->addWhere($alias . '.is_activated = ?', 1)
            ->addOrderBy($alias . '.expires_at DESC');

        return $query;
    }

    /**
     * cleanup 
     * 
     * @param mixed $days 
     * @access public
     * @return void
     */
    public function cleanup($days)
    {
        $q = $this->createQuery('a')
            ->delete()
            ->andWhere('a.is_activated = ?', 0)
            ->andWhere('a.created_at < ?', date('Y-m-m', time() - 86400*$days));

        return $q->execute();
    }

    public function retrieveBackendJobList(Doctrine_Query $q)
    {
        $rootAlias = $q->getRootAlias();

        $q->leftJoin($rootAlias . '.JobeetCategory c');
        return $q;
    }

}
